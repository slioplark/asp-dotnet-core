@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer localizer

@{
    ViewData["Title"] = "Index";
}

@*Result*@
<h2>View Result</h2>

<h3>
    <a href="@Context.Request.Path"><input type="button" class="btn btn-primary" value="中文" /></a>
    <a href="?culture=en-US"><input type="button" class="btn btn-primary" value="英文" /></a>
</h3>

<h3>
    @localizer["Language"] @localizer["Translation"]
</h3>

<ul>
    <li><h4>@localizer["One"]</h4></li>
    <li><h4>@localizer["Two"]</h4></li>
    <li><h4>@localizer["Three"]</h4></li>
    <li><h4>@localizer["Four"]</h4></li>
    <li><h4>@localizer["Five"]</h4></li>
    <li><h4>@localizer["Six"]</h4></li>
    <li><h4>@localizer["Seven"]</h4></li>
    <li><h4>@localizer["Eight"]</h4></li>
    <li><h4>@localizer["Nine"]</h4></li>
    <li><h4>@localizer["Ten"]</h4></li>
</ul>

@*Step 1*@
<h2>Add Localization Service</h2>
<pre>
services.AddLocalization(options => options.ResourcesPath = "Resources");

services.AddMvc()
    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)
    .AddDataAnnotationsLocalization();
</pre>

@*Step 2*@
<h2>Set Localization</h2>
<pre>
var supportedCultures = new[]
{
    new CultureInfo("zh-TW"),
    new CultureInfo("en-US"),
};

app.UseRequestLocalization(new RequestLocalizationOptions
{
    DefaultRequestCulture = new RequestCulture("zh-TW"),
    SupportedCultures = supportedCultures,
    SupportedUICultures = supportedCultures
});
</pre>

@*Step 3*@
<h2>Add Resource File(.resx)</h2>
<pre>
Views
    |---V
        |---Index.en-US.resx
        |---Index.zh-TW.resx           
</pre>

@*Step 4*@
<h2>Inject IViewLocalizer in View</h2>
<pre>
@@using Microsoft.AspNetCore.Mvc.Localization
@@inject IViewLocalizer localizer
</pre>

@*Step 5*@
<h2>Use @@localizer in View</h2>
<pre>
@@localizer["Language"]
</pre>